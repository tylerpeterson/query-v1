<%
  var targetScores = {
    daysWithTasksScore: "45%",
    meanTasksPerDay: 0.85,
    meanEstimatedHoursPerDay: 3.10
  }

  var warnings = {};

  for (var key in targetScores) {
    if (targetScores.hasOwnProperty(key) && parseFloat(targetScores[key], 10) > parseFloat(scores[key], 10)) {
      warnings[key] = true;
    }
  }
%>

<!DOCTYPE html>
<html>
  <head>
    <title>Productivity Cadence for <%= user.name %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
<body>
  <a id="back-link">Back to users</a>
  <h1>Productivity Cadence Summary for <a href="<%= user.url %>"><%= user.name %></a></h1>
  <form class="datepicker" action="?" method="get">
    <label title="Start date">From: <input type="text" name="start" id="start-date"></input></label>
    <label title="End date"> to: <input type="text" name="end" id="end-date"></input></label>
    <input type="submit" title="Update time range" value="Update time range"></input>
    <a href="?" class="reset" title="Reset date range to default">Reset</a>
  </form>
  <h3 id="print-subheading"></h3>
  <h2>Productivity Scores</h2>
  <table>
    <thead>
      <tr><td>Metric</td><td>Score</td><td>Minimum<br/>Standard</td></tr>
    </thead>
    <tbody>
      <tr>
        <td <%= (warnings.daysWithTasksScore)? "class=warning": ""; %>>Days With Tasks</td>
        <td><%= scores.daysWithTasksScore%></td>
        <td><%= targetScores.daysWithTasksScore %></td>
      </tr>
      <tr>
        <td <%= (warnings.meanTasksPerDay)? "class=warning": ""; %>>Tasks per Day</td>
        <td><%= scores.meanTasksPerDay %></td>
        <td><%= targetScores.meanTasksPerDay %></td>
      </tr>
      <tr>
        <td <%= (warnings.meanEstimatedHoursPerDay)? "class=warning": ""; %>>Estimated Hours per Day</td>
        <td><%= scores.meanEstimatedHoursPerDay %></td>
        <td><%= targetScores.meanEstimatedHoursPerDay %></td>
      </tr>
    </tbody>
  </table>
  <h3>Supporting Data</h3>
  <table>
    <thead>
      <tr><td>Measurement</td><td>Value</td><td>Notes</td></tr>
    </thead>
    <tbody>
      <tr>
        <td>Work Days</td>
        <td><%= scores.workDays %></td>
        <td>Calendar days in the interval minus week-ends and company holidays.</td>
      </tr>
      <tr>
        <td>Total Days with Tasks</td>
        <td><%= scores.totalDaysWithTasks %></td>
        <td>Total days in the interval where at least some work was accomplished. Having collaborators may lead to fractional counts.</td>
      </tr>
      <tr>
        <td>Total Tasks</td>
        <td><%= scores.totalTasks %></td>
        <td>Total tasks completed in the interval. Having collaborators may lead to fractional counts.</td>
      </tr>
      <tr>
        <td>Total Estimated Hours</td>
        <td><%= scores.totalEstimatedHours %></td>
        <td>The sum of all the original estimated hours for all the tasks completed.</td>
      </td>
    </tbody>
  </table>
  <h2>Daily Task Cadence for <a href="<%= user.url %>"><%= user.name %></a></h2>
  <table class="user-task-cadence">
    <thead>
      <tr>
        <td class="user-task-cadence__day-column">Day</td>
        <td class="user-task-cadence__count-column">Count</td>
        <td class="user-task-cadence__id-column">ID</td>
        <td class="user-task-cadence__name-column">Name</td>
        <td class="user-task-cadence__age-column">Age When Completed</td>
        <td>Task Estimate</td>
        <td class="user-task-cadence__collaborators-column">Collaborators</td>
      </tr>
    </thead>
    <tbody>
      <% data.forEach(function (dayData) {%>
        <tr class="<%= dayData.clazz %>">
          <td rowspan=<%= dayData.tasks.length || 1 %> title="<%- dayData.labelDetail %>"><%= dayData.label %></td>
          <td rowspan=<%= dayData.tasks.length || 1 %>><%= dayData.tasks.length %></td>
          <% dayData.tasks.forEach(function (taskData, index) {%>
            <td><a href="<%= taskData.url %>"><%= taskData.number %></a></td>
            <td><a href="<%= taskData.url %>"><%= taskData.name %></a></td>
            <td title="<%- taskData.ageDetail %>"><%= taskData.age %></td>
            <td><%= taskData.taskEstimate %></td>
            <td>
              <% taskData.collaborators.forEach(function (collaborator) { %>
                <a href="<%= collaborator.url %>"><%= collaborator.name %></a>
              <% }); %>
            </td>
            <% if (index < dayData.tasks.length - 1) { %>
              </tr>
              <tr class="<%= dayData.clazz %>">
            <% } %>
          <% }); %>
          <% if (dayData.tasks.length === 0) { %>
            <td></td><td></td><td></td><td></td><td></td>
          <% } %>
        </tr>
      <% }); %>
    </tbody>
  </table>
  <% if (devMode) { %>
    <pre><%= dataString %></pre>
  <% } %>

<link rel="stylesheet" href="/vendor/pikaday.css">
<script src="/vendor/moment-2.13.0-min.js"></script>
<script src="/vendor/pikaday-1.4.0-min+.js"></script>
<script>
  var query = window.location.search.substring(1),
      urlParams,
      startDate,
      endDate,
      startPicker,
      endPicker;
  (window.onpopstate = function () {
    var match,
      pl = /\+/g,  // Regex for replacing addition symbol with a space
      search = /([^&=]+)=?([^&]*)/g,
      decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
    urlParams = {};
    while (match = search.exec(query)) {
     urlParams[decode(match[1])] = decode(match[2]);
    }

    startDate = (urlParams.start)? moment(urlParams.start): moment().subtract("days", 14);
    endDate = (urlParams.end)? moment(urlParams.end): moment();

    startPicker = new Pikaday({
      defaultDate: startDate.toDate(),
      setDefaultDate: true,
      minDate: moment("1990").toDate("YYYY"),
      maxDate: endDate.toDate(),
      field: document.getElementById("start-date"),
      format: "YYYY-MM-DD",
      onClose: function(evt) {
        // Set min end date selectable to the selected start date
        endPicker.setMinDate(startPicker.getDate());
      }
    });

    endPicker = new Pikaday({
      defaultDate: endDate.toDate(),
      setDefaultDate: true,
      minDate: startDate.toDate(),
      maxDate: moment().toDate(),
      field: document.getElementById("end-date"),
      format: "YYYY-MM-DD",
      onClose: function(evt) {
        // Set max start date selectable to the selected end date
        startPicker.setMaxDate(endPicker.getDate());
      }

    });

    document.getElementById("print-subheading").innerHTML = "From " + startDate.format("MMM Do, YYYY") + " through " + endDate.format("MMM Do, YYYY") + " (" + <%= scores.workDays %> + " days)";

    document.getElementById("back-link").setAttribute("href", "/users?" + query);
  })();
</script>

</body>
</html>
